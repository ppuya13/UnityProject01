syntax = "proto3";

package game;

option go_package = "Server/messages";

message GameMessage {
  oneof payload {
    LoginRequest login_request = 1;
    LoginResponse login_response = 2;
    LogoutRequest logout_request = 3;
    LogoutResponse logout_response = 4;
    GameStart game_start = 5;
    ChatMessage chat_message = 6;
    Ping ping = 7;
    Pong pong = 8;


    //플레이어 관련은 11~30
    PlayerInput player_input = 11;
    PlayerSpawn player_spawn = 12;
    PlayerAttackAnim player_attack_anim = 13;
    SetPlayerAttack set_player_attack = 14;

    //몬스터관련은 31-40
    MonsterSpawn monster_spawn = 31;
    MonsterPositionUpdate monster_position_update = 32;
    MonsterAnim monster_anim = 33;
    MonsterAction monster_action = 34;
    MonsterTakeDamage monster_take_damage = 35;

    ServerStarted server_started = 100;
    
  }
}

// 3D 벡터를 표현하는 메시지
message GoVector3 {
  float x = 1;
  float y = 2;
  float z = 3;
}

message Ping{
  int64 timestamp = 1;
}

message Pong{
  int64 timestamp = 1;
}

message ServerStarted{
}

// 로그인 요청 메시지
message LoginRequest {
  string id = 1;  // 사용자 이름, Stove에서 ulong(uint64)형식의 member_no를 받아온다. 아마 유니크할 것으로 보임.
  string nickname = 2;
  string game_user_id = 3;
}

// 로그인 응답 메시지
message LoginResponse {
  bool success = 1;        // 로그인 성공 여부
  string player_id = 2;    // 플레이어의 id
  string username = 3;     // 사용자 닉네임
  string game_user_id = 4; // gameuserid
  string error_message = 5; // 오류 메시지 (실패 시)
}

message GameStart{
}

message ChatMessage{
  string player_id = 1;
  string nickname = 2;
  string message = 3;
  bool system = 4; //시스템메시지인지 표시
}

//플레이어 스폰을 위한 정보를 보내는 메시지
message PlayerSpawn{
  string player_id = 1; //지금 들어온 캐릭터의 id
  string nickname = 2; //지금 들어온 캐릭터의 닉네임
  repeated PlayerInfo players = 3; //이전에 접속해있던 플레이어들의 정보 목록
}

//공격 애니메이션 동기화를 위한 메시지
message PlayerAttackAnim{
  string player_id = 1;
  int32 hash = 2;
  int32 layer = 3;
}

//개별 플레이어의 정보를 담음
message PlayerInfo{
  string id = 1;
  string nickname = 2;
}

// 로그아웃 요청 메시지
message LogoutRequest {
  string player_id = 1;  // 로그아웃할 플레이어의 ID
}

// 로그아웃 응답 메시지
message LogoutResponse {
  bool success = 1;        // 로그아웃 성공 여부
  string error_message = 2; // 오류 메시지 (실패 시)
}

message PlayerInput{
  string player_id = 1;
  PlayerActionType player_action_type = 2;

  //위치 업데이트에 사용할 변수들
  GoVector3 position = 3;
  GoVector3 velocity = 4;
  GoVector3 rotation = 5;
  float horizontal = 14;
  float vertical = 15;
  bool isRunning = 16;

  //공격에 사용할 변수들
  int32 anim_hash = 6; //공격 애니메이션 해시

  //피격 효과에 사용할 변수들
  //GoVector3 attack_direction = 7; //피격 시 넉백 방향
  //KnockBackType knockback_type = 8;
  GoVector3 knockback = 9; //클라이언트에서 방향, 넉백 타입, 파워에 의해 계산된 넉백 방향
  float stun_duration = 10;
  float current_hp = 11; //공격을 받은 후 남은 hp
  bool is_die = 12; //공격을 받은 이후 사망여부
  AnimatorParams params = 13; //애니메이터 파라미터를 변경하기 위한 값

  //회피에 사용할 변수들
  DodgeAnimParams dodge_params = 17;
}

message AnimatorParams{
  float lr = 1;
  float fb = 2;
  bool is_bound = 3;
  bool is_down = 4;
  float motion_index = 5;
}

message DodgeAnimParams{
  float move_x = 1;
  float move_y = 2;
  bool is_back = 3;
  float dodge_vertical = 4;
}

enum PlayerActionType{
  PLAYER_ACTION_UNKNOWN = 0;
  PLAYER_ACTION_MOVE = 1;
  PLAYER_ACTION_ATTACK = 2;
  PLAYER_ACTION_TAKEDAMAGE = 3;
  PLAYER_ACTION_DODGE = 4;
}

//플레이어가 공격할 때 OtherPlayer에 currentAttack를 전달하기 위해 사용
message SetPlayerAttack{
  string player_id = 1;
  PlayerAttackName attack_name = 2;
  int32 attack_index = 3;
}

enum PlayerAttackName{
  PLAYER_ATTACK_UNKNOWN = 0;
  COMBO_01 = 1;
  COMBO_02 = 2;
  COMBO_03 = 3;
  COMBO_04 = 4;
}

enum KnockBackType{
  KNOCKBACK_UNKNOWN = 0;
  KNOCKBACK_NONE = 1;
  KNOCKBACK_UP = 2;
  KNOCKBACK_PUSH = 3;
  KNOCKBACK_PULL = 4;
  KNOCKBACK_BOUND = 5;
  KNOCKBACK_DOWN = 6;
}

message MonsterPositionUpdate{
  GoVector3 position = 1;
}

message MonsterSpawn{
  string monster_id = 1;
}

message MonsterAnim{ //몬스터의 애니메이터의 해시와 파라미터를 변경
  string monster_id = 1;
  int32 anim_hash = 2;
  ParameterType parameter_type = 3;
  int32 int_value = 4;
  float float_value = 5;
  bool bool_value = 6;
}

enum ParameterType{
  PARAMETER_UNKNOWN = 0;
  PARAMETER_INT = 1;
  PARAMETER_FLOAT = 2;
  PARAMETER_BOOL = 3;
  PARAMETER_TRIGGER = 4;
}

message MonsterAction{
  string monster_id = 1;
  ActionType action_type = 2;
  MonsterState monster_state = 3;
  AttackType attack_type = 4;
  string targetId = 5;
  GoVector3 destination = 6;
  float dodge_option = 7;
}

enum ActionType{
  MONSTER_ACTION_UNKNOWN = 0;
  MONSTER_ACTION_SET_STATUS = 1;
  MONSTER_ACTION_SET_TARGET = 2; //바라볼 타겟을 설정
  MONSTER_ACTION_SET_DESTINATION = 3; //이동할 목적지를 설정
}

message MonsterTakeDamage{
  string monster_id = 1;
  float damage = 2;
  float current_hp = 3; //맞은 이후의 체력
  SoundType sound_type = 4; //맞았을 때 재생할 사운드
}

enum MonsterState{
  MONSTER_STATUS_UNKNOWN = 0;
  MONSTER_STATUS_SPAWN = 1;
  MONSTER_STATUS_IDLE = 2;
  MONSTER_STATUS_MOVE = 3;
  MONSTER_STATUS_DASH = 4;
  MONSTER_STATUS_DODGE = 5;
  MONSTER_STATUS_ATTACK = 6;
  MONSTER_STATUS_DIE = 7;
}

enum AttackType{
  MONSTER_ATTACK_UNKNOWN = 0;

  //1~10 근접상태 공격
  MONSTER_ATTACK_CLOSE_01 = 1;    //두번썰고 발차기
  MONSTER_ATTACK_CLOSE_02 = 2;    //세번썰기
  MONSTER_ATTACK_CLOSE_03 = 3;    //뒤로구르고 베기
  MONSTER_ATTACK_CLOSE_COUNTER = 4; //반격기

  //11~20 근거리 공격    
  MONSTER_ATTACK_SHORT_RANGE_01 = 11;
  MONSTER_ATTACK_SHORT_RANGE_02 = 12;
  MONSTER_ATTACK_SHORT_RANGE_03 = 13;

  //21~30 중거리 공격
  MONSTER_ATTACK_MID_RANGE_01 = 21;

  //31~40 원거리 공격
  MONSTER_ATTACK_LONG_RANGE_01 = 31;

  //41~50 초장거리 공격
  MONSTER_ATTACK_EXTRA_RANGE_01 = 41;
}

enum SoundType{
  UNKNOWN = 0;
  SWORD_SWING = 1;
  KICK = 2;
  SWORD_HIT = 3;
  KICK_HIT = 4;
  CAST = 5;
  GUARD = 6;
}